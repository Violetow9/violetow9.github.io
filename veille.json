[
  {
    "name": "SOLID Principles With (almost) Real-Life Examples in Java",
    "date": "5 janvier 2022",
    "url": "https://betterprogramming.pub/solid-principles-with-almost-real-life-examples-in-java-b292a4e2c18b",
    "img": "https://miro.medium.com/v2/resize:fit:640/format:webp/1*cRdO9c0N4P0QSg9LnJPTeg.jpeg",
    "category": "JAVA",
    "description": "SOLID principles are some of the oldest rules in the software world. They enable us to write maintainable, readable, reusable code. In this text, I am trying to accomplish a somewhat real-life example, obeying the SOLID principles.",
    "author": "Berke Soysal",
    "read_time": 3,
    "summary": "L'article présente les principes SOLID de la programmation orientée objet à travers des exemples concrets en Java. Les principes SOLID visent à améliorer la qualité du code en le rendant plus facile à comprendre, à maintenir et à étendre.",
    "advantages": [
      "Améliorent la qualité du code en le rendant plus facile à comprendre, à maintenir et à étendre.",
      "Réduisent la complexité du code en le divisant en classes simples et bien définies.",
      "Facilitent la réutilisation du code et la création de nouvelles fonctionnalités."
    ],
    "disadvantages": [
      "Peuvent rendre le code plus verbeux et complexe à comprendre si appliqués de manière excessive.",
      "Peuvent nécessiter une plus grande planification et une plus grande connaissance des principes de conception pour être correctement appliqués.",
      "Peuvent parfois entraîner une augmentation de la quantité de code nécessaire pour implémenter une fonctionnalité."
    ]
  },
  {
    "name": "Dependency Inversion Principle: How Google Developers write code",
    "date": "10 avril 2022",
    "url": "https://paigeshin1991.medium.com/dependency-inversion-principle-how-google-developers-write-code-f6cbd3b530a6",
    "img": "https://miro.medium.com/v2/resize:fit:720/format:webp/1*0QZCG375uYmgHsyK9aJMFg.png",
    "category": "JAVA",
    "description": "Using CompletableFuture to implement an asynchronous use case",
    "author": "Suraj Mishra",
    "read_time": 2,
    "summary": "Le principe d'inversion de dépendance (DIP) est une pratique de développement logiciel qui consiste à créer des modules hautement réutilisables en les rendant indépendants des détails de mise en œuvre de leurs dépendances. Cela permet de faciliter la maintenance, les tests et les modifications du code.",
    "advantages": [
      "Réduction de la complexité du code et augmentation de sa flexibilité.",
      "Amélioration de la qualité du code et facilité de sa maintenance.",
      "Possibilité de réutiliser des modules dans d'autres projets."
    ],
    "disadvantages": [
      "Complexité accrue de la mise en place de l'architecture du code.",
      "Nécessité de créer des interfaces pour les modules, ce qui peut prendre du temps supplémentaire.",
      "Risque d'une certaine surabstraction, qui peut compliquer la compréhension du code."
    ]
  },
  {
    "name": "How to Scale Application to support Millions User",
    "date": "17 avril 2022",
    "url": "https://sahil-code.medium.com/how-to-scale-application-to-support-millions-user-a71005856670",
    "img": "https://miro.medium.com/v2/resize:fit:640/format:webp/1*y0wWDCkOUAJkOuetskGuEw.png",
    "category": "WEB PERFORMANCES",
    "description": "Designing a system that supports millions of user is a process that requires continuous improvement and refinement. In this article, we will discuss about high level system architecture for single user first and then scale our system to millions of user.",
    "author": "Sahil Patel",
    "read_time": 4,
    "summary": "L'article parle de la façon de mettre à l'échelle une application pour prendre en charge des millions d'utilisateurs, en se concentrant sur les aspects tels que la conception de l'architecture, la gestion de la base de données, la mise en cache, la distribution de contenu et l'utilisation de technologies de cloud computing.",
    "advantages": [
      "Permet de gérer une grande quantité de trafic et d'utilisateurs",
      "Offre une grande flexibilité en termes de capacité de traitement et de stockage",
      "Permet de réduire les coûts d'infrastructure et de maintenance"
    ],
    "disadvantages": [
      "La mise en place d'une architecture évolutive peut être complexe et nécessiter des compétences spécifiques",
      "La dépendance à des fournisseurs de services de cloud peut créer des risques de verrouillage et de sécurité",
      "L'utilisation de cette technologie peut augmenter les coûts à long terme si elle n'est pas gérée correctement."
    ]
  }
]
